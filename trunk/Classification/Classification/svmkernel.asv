function [K,option]=svmkernel(x,kernel,kerneloption,xsup,framematrix,vector,dual);

% Usage  K=svkernel(x,kernel,kerneloption,xsup,frame,vector,dual);
%
% Returns the scalar product of the vectors x by using the
% mapping defined by the kernel function or x and xsup
% if the matrix xsup is defined
%
% Input
% 
% x		:input vectors
% kernel 	: kernel function
%		Type								Function					Option
%		Polynomial						'poly'					Degree (<x,xsup>+1)^d
%		Homogeneous polynomial		'polyhomog'				Degree <x,xsup>^d	
%		Gaussian							'gaussian'				Bandwidth
%		Heavy Tailed RBF				'htrbf'					[a,b]   %see Chappelle 1999	
%		Mexican 1D Wavelet 			'wavelet'
%		Frame kernel					'frame'					'sin','numerical'...	
%
%  kerneloption	: scalar or vector containing the option for the kernel
% 'gaussian' : scalar gamma is identical for all coordinates
%              otherwise is a vector of length equal to the number of 
%              coordinate
% 
%
% 'poly' : kerneloption is a scalar given the degree of the polynomial
%          or is a vector which first element is the degree of the polynomial
%           and other elements gives the bandwidth of each dimension.
%          thus the vector is of size n+1 where n is the dimension of the problem.
%
%
% xsup		: support vector
%
% ----- 1D Frame Kernel -------------------------- 
%
%  framematrix  frame elements for frame kernel
%  vector       sampling position of frame elements
%	dual 		  dual frame
%  frame,vector and dual are respectively the matrices and the vector where the frame 
%  elements have been processed. these parameters are used only in case
%
%
%	see also svmreg,svmclass,svmval, kernelwavelet,kernelframe
%

% O4/O6/2000 A. Rakotomamonjy

condcheck_chi=2201;
start_chi=[1,2001,2201];
end_chi=[2000,2200,00];
Kernel_flag=0; % if color_flag = 1 -> Gaussian Kernel else Chi_square kernal

if nargin < 6
    vector=[];
    dual=[];
end;
if nargin <5
    frame=[];
end;

if nargin<4
    xsup=x;
end;
if nargin<3
    kerneloption=1;
end;
if nargin<2
    kernel='gaussian';
end;
if isempty(xsup)
    xsup=x;
end;
[n1 n2]=size(x);
[n n3]=size(xsup);
ps1=zeros(n1,n);	
ps2=zeros(n1,n);	
ps  =  zeros(n1,n);	% produit scalaire
switch lower(kernel)
case 'poly'
    
    [nk,nk2]=size(kerneloption);   
    if nk>nk2
        kerneloption=kerneloption';
        nk2=nk;
    end;
    if nk2==1
        degree=kerneloption;
        var=ones(1,n2);
        
    elseif nk2 ==2
        degree=kerneloption(1);
        var=ones(1,n2)*kerneloption(2);
        
    elseif nk2== n2+1
        degree=kerneloption(1);
        var=kerneloption(2:n2+1);
        
    elseif nk2 ==n2+2
        degree=kerneloption(1);
        var=kerneloption(2:n2+1);
    end;

    if nk2==1
        aux=1;
    else
        aux=repmat(var,n,1);
    end;
  
    ps= x *(xsup.*aux.^2)';

    if degree > 1
        K =(ps+1).^degree;
    else
        K=ps;
    end;
case 'polyhomog'
    
    [nk,nk2]=size(kerneloption);   
    if nk>nk2
        kerneloption=kerneloption';
        nk2=nk;
    end;
    if nk2==1
        degree=kerneloption;
        var=ones(1,n2);
    else
        if nk2 ~=n2+1
            degree=kerneloption(1);
            var=ones(1,n2)*kerneloption(2);
        else
            degree=kerneloption(1);
            var=kerneloption(2:nk2);
        end;
    end;
    
    
    aux=repmat(var,n,1);
    ps= x *(xsup.*aux.^2)';
    K =(ps).^degree;
    
    
case 'gaussian'
    [nk,nk2]=size(kerneloption);
    if nk ~=nk2
        if nk>nk2
            kerneloption=kerneloption';
        end;
    else
        kerneloption=ones(1,n2)*kerneloption;
    end;
    
    if length(kerneloption)~=n2 & length(kerneloption)~=n2+1 
        error('Number of kerneloption is not compatible with data...');
    end;
    if(Kernel_flag)
    %%%%%%% Original Gaussian Kernel %%%%%%%%%
   
    metric = diag(1./kerneloption.^2);
    ps = x*metric*xsup'; 
    [nps,pps]=size(ps);
    normx = sum(x.^2*metric,2);
    normxsup = sum(xsup.^2*metric,2);
    ps = -2*ps + repmat(normx,1,pps) + repmat(normxsup',nps,1) ; 
    K = exp(-ps/2);
    
    else
    %%%%%% for CHI-Sqaure Kernal %%%%%%%%
    %%%%%%%%% Extended Gaussian Kernel (CHI_Square) %%%%%%%%%%%%
    %%%%%%%%%%%%%%%%% for texture features%%%%%%%%%%%%%%%%%%%%%%%
    if(size(x,2)>condcheck_chi)
    metric = diag(1./kerneloption(:,start_chi(1):end_chi(1)).^2);
    
    ps = x(:,start_chi(1):end_chi(1))*metric*xsup(:,start_chi(1):end_chi(1))'; 
    [nps,pps]=size(ps);
    normx = sum(x(:,start_chi(1):end_chi(1)).^2*metric,2);
    normxsup = sum(xsup(:,start_chi(1):end_chi(1)).^2*metric,2);
    normx1 = sum(x(:,start_chi(1):end_chi(1))*metric,2);
    normxsup1 = sum(xsup(:,start_chi(1):end_chi(1))*metric,2);
    ps = -2*ps + repmat(normx,1,pps) + repmat(normxsup',nps,1) ; 
    
   add_both=repmat(normx1,1,pps) + repmat(normxsup1',nps,1);
   add_both(find(add_both==0)) = 1;
   d=(ps./add_both);
   
   K1 = exp(-1/mean(mean(d)).*d);
   
%    %%%%%%%%%%%%%%%%%%% for LBP if incorporated %%%%%%%%%%%%%%%
    metric2 = diag(1./kerneloption(:,start_chi(2):end_chi(2)).^2);
    
    ps2 = x(:,start_chi(2):end_chi(2))*metric2*xsup(:,start_chi(2):end_chi(2))'; 
    [nps2,pps2]=size(ps2);
    normx = sum(x(:,start_chi(2):end_chi(2)).^2*metric2,2);
    normxsup = sum(xsup(:,start_chi(2):end_chi(2)).^2*metric2,2);
    normx1 = sum(x(:,start_chi(2):end_chi(2))*metric2,2);
    normxsup1 = sum(xsup(:,start_chi(2):end_chi(2))*metric2,2);
    ps2 = -2*ps2 + repmat(normx,1,pps2) + repmat(normxsup',nps2,1) ; 
    
   add_both2=repmat(normx1,1,pps2) + repmat(normxsup1',nps2,1);
   add_both2(find(add_both2==0)) = 1;
   d2=(ps2./add_both2);
   
   K2 = exp(-1/mean(mean(d2)).*d2);
   
    %%%%%%%%%%%%%%%%% for color features%%%%%%%%%%%%%%%%%%%%%%%
  
    
    
    metric3 = diag(1./kerneloption(:,start_chi(3):end_chi(3)).^2);
    ps1 = x(:,start_chi(3):end_chi(3))*metric3*xsup(:,start_chi(3):end_chi(3))'; 
    [nps1,pps1]=size(ps1);
    normx = sum(x(:,start_chi(3):end_chi(3)).^2*metric3,2);
    normxsup = sum(xsup(:,start_chi(3):end_chi(3)).^2*metric3,2);
    normx1 = sum(x(:,start_chi(3):end_chi(3))*metric3,2);
    normxsup1 = sum(xsup(:,start_chi(3):end_chi(3))*metric3,2);
    ps1 = -2*ps1 + repmat(normx,1,pps1) + repmat(normxsup',nps1,1) ; 
    
   add_both1=repmat(normx1,1,pps1) + repmat(normxsup1',nps1,1);
   add_both1(find(add_both1==0)) = 1;
   d1=(ps1./add_both1);
   K3 = exp(-1/mean(mean(d1)).*d1);
     K=K1+K2+K3;
     
    
     
     
     
     
    
%     %%%%%%%%%%%%%%%%% for 4th feature  features%%%%%%%%%%%%%%%%%%%%%%%
%     metric4 = diag(1./kerneloption(:,start_chi(4):end_chi(4)).^2);
%     ps4 = x(:,start_chi(4):end_chi(4))*metric4*xsup(:,start_chi(4):end_chi(4))'; 
%     [nps4,pps4]=size(ps4);
%     normx = sum(x(:,start_chi(4):end_chi(4)).^2*metric4,2);
%     normxsup = sum(xsup(:,start_chi(4):end_chi(4)).^2*metric4,2);
%     normx1 = sum(x(:,start_chi(4):end_chi(4))*metric4,2);
%     normxsup1 = sum(xsup(:,start_chi(4):end_chi(4))*metric4,2);
%     ps4 = -2*ps4 + repmat(normx,1,pps4) + repmat(normxsup',nps4,1) ; 
%     
%    add_both4=repmat(normx1,1,pps4) + repmat(normxsup1',nps4,1);
%    add_both4(find(add_both4==0)) = 1;
%    d4=(ps4./add_both4);
%    K4 = exp(-1/mean(mean(d4)).*d4);
% %     K=K1+K2+K3+K4;
%  %%%%%%%%%%%%%%%%% for 5th feature  features%%%%%%%%%%%%%%%%%%%%%%%
%     metric5 = diag(1./kerneloption(:,start_chi(5):end_chi(5)).^2);
%     ps5 = x(:,start_chi(5):end_chi(5))*metric5*xsup(:,start_chi(5):end_chi(5))'; 
%     [nps5,pps5]=size(ps5);
%     normx = sum(x(:,start_chi(5):end_chi(5)).^2*metric5,2);
%     normxsup = sum(xsup(:,start_chi(5):end_chi(5)).^2*metric5,2);
%     normx1 = sum(x(:,start_chi(5):end_chi(5))*metric5,2);
%     normxsup1 = sum(xsup(:,start_chi(5):end_chi(5))*metric5,2);
%     ps5 = -2*ps5 + repmat(normx,1,pps5) + repmat(normxsup',nps5,1) ; 
%     
%    add_both5=repmat(normx1,1,pps5) + repmat(normxsup1',nps5,1);
%    add_both5(find(add_both5==0)) = 1;
%    d5=(ps5./add_both5);
%    K5 = exp(-1/mean(mean(d5)).*d5);
%    K=K1+K2+K3+K4+K5;








    %%%%%%%%%%%% for 2nd condition %%%%%%%%%%%%%
    elseif(size(x,2)<condcheck_chi)
        
            metric = diag(1./kerneloption(:,start_chi(1):end_chi(1)).^2);
    
    ps = x(:,start_chi(1):end_chi(1))*metric*xsup(:,start_chi(1):end_chi(1))'; 
    [nps,pps]=size(ps);
    normx = sum(x(:,start_chi(1):end_chi(1)).^2*metric,2);
    normxsup = sum(xsup(:,start_chi(1):end_chi(1)).^2*metric,2);
    normx1 = sum(x(:,start_chi(1):end_chi(1))*metric,2);
    normxsup1 = sum(xsup(:,start_chi(1):end_chi(1))*metric,2);
    ps = -2*ps + repmat(normx,1,pps) + repmat(normxsup',nps,1) ; 
    
   add_both=repmat(normx1,1,pps) + repmat(normxsup1',nps,1);
   add_both(find(add_both==0)) = 1;
   d=(ps./add_both);
   
   K1 = exp(-1/mean(mean(d)).*d);
   
   %%%%%%%%%%%%%%%%%%% for LBP if incorporated %%%%%%%%%%%%%%%
    metric2 = diag(1./kerneloption(:,start_chi(2):end_chi(2)).^2);
    
    ps2 = x(:,start_chi(2):end_chi(2))*metric2*xsup(:,start_chi(2):end_chi(2))'; 
    [nps2,pps2]=size(ps2);
    normx = sum(x(:,start_chi(2):end_chi(2)).^2*metric2,2);
    normxsup = sum(xsup(:,start_chi(2):end_chi(2)).^2*metric2,2);
    normx1 = sum(x(:,start_chi(2):end_chi(2))*metric2,2);
    normxsup1 = sum(xsup(:,start_chi(2):end_chi(2))*metric2,2);
    ps2 = -2*ps2 + repmat(normx,1,pps2) + repmat(normxsup',nps2,1) ; 
    
   add_both2=repmat(normx1,1,pps2) + repmat(normxsup1',nps2,1);
   add_both2(find(add_both2==0)) = 1;
   d2=(ps2./add_both2);
   
   K2 = exp(-1/mean(mean(d2)).*d2);
   K=K1+K2;
    end
    end        
    


   
  %%%%%%%%%%%% Normal Extended Gaussian Kernel (CHI_square Kernel)%%%%%%%%%%%% 
%     metric = diag(1./kerneloption.^2);
%     ps = x*metric*xsup'; 
%     [nps,pps]=size(ps);
%     normx = sum(x.^2*metric,2);
%     normxsup = sum(xsup.^2*metric,2);
%     normx1 = sum(x*metric,2);
%     normxsup1 = sum(xsup*metric,2);
%     ps = -2*ps + repmat(normx,1,pps) + repmat(normxsup',nps,1) ; 
%     
%    add_both=repmat(normx1,1,pps) + repmat(normxsup1',nps,1);
%    d=(ps./add_both);
% %      K = exp(-1/mean(mean(d)).*d);
% K = exp(-1/mean(mean(d)).*d);

    
    
case 'htrbf'    % heavy tailed RBF  %see Chappelle Paper%
    b=kerneloption(2);
    a=kerneloption(1);
    for i=1:n
        ps(:,i) = sum( abs((x.^a - ones(n1,1)*xsup(i,:).^a)).^b   ,2);
    end;
    
    
    K = exp(-ps);
    
case 'gaussianslow'    %
    %b=kerneloption(2);
    %a=kerneloption(1);
    for i=1:n
        ps(:,i) = sum( abs((x - ones(n1,1)*xsup(i,:))).^2 ,2)./kerneloption.^2/2;
    end;
    
    
    K = exp(-ps);
case 'multiquadric'
    metric = diag(1./kerneloption);
    ps = x*metric*xsup'; 
    [nps,pps]=size(ps);
    normx = sum(x.^2*metric,2);
    normxsup = sum(xsup.^2*metric,2);
    ps = -2*ps + repmat(normx,1,pps) + repmat(normxsup',nps,1) ; 
    K=sqrt(ps + 0.1);
case 'wavelet'
    K=kernelwavelet(x,kerneloption,xsup);     
case 'frame'
    K=kernelframe(x,kerneloption,xsup,framematrix,vector,dual);
case 'wavelet2d'
    K=wav2dkernelint(x,xsup,kerneloption);
case 'radialwavelet2d'
    K=radialwavkernel(x,xsup);    
case 'tensorwavkernel'
    [K,option]=tensorwavkernel(x,xsup,kerneloption);  

case 'numerical'
    K=kerneloption.matrix;
case 'polymetric'
    K=x*kerneloption.metric*xsup';
    
case 'jcb'
    K=x*xsup';
    
end;



